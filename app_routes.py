"""
Rotas da API para o painel de resultados de voos reais
Este m√≥dulo cont√©m as rotas necess√°rias para fornecer dados reais 
da API Amadeus para exibi√ß√£o no frontend.
"""
import logging
import json
import uuid
from flask import Blueprint, jsonify, request

# Importar os servi√ßos necess√°rios
from services.amadeus_sdk_service import AmadeusSDKService
from services.flight_service_connector import flight_service_connector

# Configurar logger
logger = logging.getLogger(__name__)

# Criar blueprint para as rotas da API de resultados de voos
api_blueprint = Blueprint('flight_results_api', __name__)

# Armazenamento em mem√≥ria para sess√µes de busca (tempor√°rio)
# Na implementa√ß√£o final, isso seria movido para um banco de dados
flight_search_sessions = {}

@api_blueprint.route('/api/flight_results/<session_id>', methods=['GET'])
def get_flight_results(session_id):
    """
    IMPLEMENTA√á√ÉO DO PLANO DE A√á√ÉO: ENDPOINT UNIFICADO PARA MURAL DE VOOS
    
    Obt√©m os resultados de voos reais da API Amadeus para uma sess√£o espec√≠fica,
    usando exclusivamente o servi√ßo FlightServiceConnector para garantir que
    apenas dados reais da API Amadeus sejam retornados.
    
    Este endpoint √© o √öNICO ponto de acesso para o painel lateral obter dados,
    eliminando qualquer caminho que possa mostrar dados n√£o-reais.
    
    Args:
        session_id: ID da sess√£o do chat
    """
    # Mensagem clara de in√≠cio de processamento para debug
    logger.warning(f"üõ´ ENDPOINT √öNICO PARA DADOS REAIS: Processando solicita√ß√£o para sess√£o {session_id}")
    try:
        logger.info(f"Recebida solicita√ß√£o para resultados de voos aut√™nticos - Sess√£o: {session_id}")
        
        # SEGURAN√áA CR√çTICA: Este endpoint NUNCA gera dados sint√©ticos
        # e sempre faz uma chamada direta e exclusiva ao conector Amadeus.
        
        # Verificar se temos resultados para esta sess√£o no cache
        if session_id in flight_search_sessions:
            logger.info(f"Retornando resultados REAIS em cache para sess√£o {session_id}")
            results = flight_search_sessions[session_id]
            
            # Log para facilitar debug
            if 'data' in results and results['data']:
                logger.info(f"Cache cont√©m {len(results['data'])} resultados aut√™nticos")
            else:
                logger.warning(f"Cache existe mas n√£o cont√©m dados v√°lidos: {results}")
                
            return jsonify(results)
        
        # Caso contr√°rio, verificar se temos par√¢metros de busca salvos
        from app import conversation_store
        
        if session_id not in conversation_store:
            logger.warning(f"Sess√£o {session_id} n√£o encontrada no conversation_store")
            return jsonify({
                "error": "Sess√£o n√£o encontrada. Por favor, inicie uma nova conversa.",
                "data": []
            })
        
        travel_info = conversation_store[session_id].get('travel_info', {})
        
        # Verificar se temos resultados j√° salvos
        if travel_info.get('search_results'):
            logger.info(f"Retornando resultados armazenados em travel_info para sess√£o {session_id}")
            flight_search_sessions[session_id] = travel_info['search_results']
            return jsonify(travel_info['search_results'])
        
        # Verificar se temos par√¢metros suficientes para realizar a busca
        if not (travel_info.get('origin') and travel_info.get('destination') and 
                (travel_info.get('departure_date') or travel_info.get('date_range_start'))):
            logger.warning(f"Par√¢metros insuficientes para busca na sess√£o {session_id}")
            return jsonify({
                "error": "Informa√ß√µes insuficientes para realizar a busca. Forne√ßa origem, destino e data.",
                "data": []
            })
        
        # Usar o servi√ßo FlightServiceConnector para buscar resultados
        logger.info(f"Buscando resultados reais da API Amadeus para sess√£o {session_id}")
        logger.debug(f"Par√¢metros de busca: {json.dumps(travel_info, default=str)}")
        
        # Realizar a busca com o conector de servi√ßo de voos
        search_results = flight_service_connector.search_flights_from_chat(
            travel_info=travel_info,
            session_id=session_id
        )
        
        # Validar os resultados
        if not search_results:
            logger.error(f"N√£o foi poss√≠vel obter resultados da API para sess√£o {session_id}")
            return jsonify({
                "error": "Falha na busca de resultados. Tente novamente com outros par√¢metros.",
                "data": []
            })
            
        if 'error' in search_results:
            logger.error(f"Erro na busca de voos: {search_results['error']}")
            return jsonify({
                "error": search_results['error'],
                "data": []
            })
        
        # Salvar os resultados na sess√£o para futuras consultas
        logger.info(f"Resultados de voos obtidos com sucesso. Salvando para sess√£o {session_id}")
        flight_search_sessions[session_id] = search_results
        travel_info['search_results'] = search_results
        return jsonify(search_results)
            
        # Se chegamos aqui, n√£o temos informa√ß√µes suficientes
        return jsonify({
            "error": "N√£o h√° resultados dispon√≠veis para esta sess√£o. Realize uma busca primeiro."
        })
        
    except Exception as e:
        logger.error(f"Erro ao obter resultados de voos: {str(e)}")
        return jsonify({
            "error": f"Ocorreu um erro ao buscar os resultados: {str(e)}"
        }), 500


# Rota para buscar diretamente pela API (usando o conector)
@api_blueprint.route('/api/flight_search', methods=['POST'])
def direct_flight_search():
    """
    Endpoint para busca direta de voos usando a API Amadeus.
    Este endpoint s√≥ usar o flight_service_connector para 
    garantir que apenas dados reais sejam retornados.
    """
    try:
        # Obter par√¢metros da requisi√ß√£o
        data = request.json
        session_id = data.get('session_id', str(uuid.uuid4()))
        
        logger.info(f"Busca direta de voos - Sess√£o: {session_id}")
        logger.debug(f"Par√¢metros de busca: {json.dumps(data, default=str)}")
        
        # Validar par√¢metros m√≠nimos
        if not (data.get('origin') and data.get('destination') and 
                (data.get('departure_date') or data.get('date_range_start'))):
            return jsonify({
                "error": "Par√¢metros insuficientes. Forne√ßa origem, destino e data.",
                "data": []
            })
        
        # Realizar a busca com o conector
        search_results = flight_service_connector.search_flights_from_chat(
            travel_info=data,
            session_id=session_id
        )
        
        # Validar e retornar os resultados
        if not search_results or 'error' in search_results:
            error_msg = search_results.get('error', 'Falha na busca de resultados') if search_results else 'Sem resultados'
            logger.error(f"Erro na busca direta: {error_msg}")
            return jsonify({
                "error": error_msg,
                "data": []
            })
        
        # Cache e retorno dos resultados
        flight_search_sessions[session_id] = search_results
        logger.info(f"Busca direta conclu√≠da com sucesso: {len(search_results.get('data', []))} resultados")
        
        # Adicionar o ID da sess√£o na resposta
        search_results['session_id'] = session_id
        return jsonify(search_results)
    
    except Exception as e:
        logger.error(f"Erro na busca direta de voos: {str(e)}")
        return jsonify({
            "error": f"Erro ao processar a busca: {str(e)}",
            "data": []
        }), 500


@api_blueprint.route('/api/flight_results/test', methods=['GET'])
def test_flight_results():
    """
    Endpoint de teste para verificar a funcionalidade do painel lateral
    Este endpoint est√° desativado para garantir que apenas dados reais sejam mostrados
    """
    try:
        # Mensagem mais clara e informativa
        return jsonify({
            "error": "MODO DE TESTE DESATIVADO: O sistema Flai agora utiliza EXCLUSIVAMENTE dados reais da API Amadeus. Para ver resultados de voos, converse com a Avi e forne√ßa detalhes sobre sua viagem.",
            "data": []
        })
    except Exception as e:
        logging.error(f"Erro ao processar solicita√ß√£o de teste: {str(e)}")
        return jsonify({
            "error": f"Ocorreu um erro ao processar a solicita√ß√£o: {str(e)}"
        }), 500
