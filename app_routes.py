"""
Rotas da API para o painel de resultados de voos reais
Este m√≥dulo cont√©m as rotas necess√°rias para fornecer dados reais 
da API Amadeus para exibi√ß√£o no frontend.

IMPORTANTE: Este m√≥dulo garante que apenas dados reais da API Amadeus
sejam retornados, nunca usando dados simulados ou falsos.
"""

import os
import json
import logging
import uuid
import traceback
import requests
from datetime import datetime, timedelta
from flask import Blueprint, request, jsonify, current_app, render_template

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Importar os servi√ßos necess√°rios
from services.amadeus_sdk_service import AmadeusSDKService
from services.flight_service_connector import flight_service_connector

# Criar blueprint para as rotas da API de resultados de voos
api_blueprint = Blueprint('flight_results_api', __name__)

# Armazenamento em mem√≥ria para sess√µes de busca (tempor√°rio)
# Na implementa√ß√£o final, isso seria movido para um banco de dados
flight_search_sessions = {}

@api_blueprint.route('/api/flight_results/<session_id>', methods=['GET'])
def get_flight_results(session_id):
    """
    ENDPOINT DEFINITIVO PARA MURAL DE VOOS
    
    Obt√©m os resultados de voos reais da API Amadeus para uma sess√£o espec√≠fica,
    usando exclusivamente o servi√ßo FlightServiceConnector para garantir que
    apenas dados reais da API Amadeus sejam retornados.
    
    Este endpoint √© o √öNICO ponto de acesso para o painel lateral obter dados,
    eliminando qualquer caminho que possa mostrar dados n√£o-reais.
    
    Args:
        session_id: ID da sess√£o do chat
    """
    # Mensagem clara de in√≠cio de processamento para debug
    logger.warning(f"üõ´ ENDPOINT REAL: Processando solicita√ß√£o de voos para sess√£o {session_id}")
    
    # Validar session_id
    if not session_id or session_id == "undefined" or session_id == "null":
        logger.error("‚ùå Session ID inv√°lido ou n√£o fornecido")
        return jsonify({
            "error": "ID de sess√£o inv√°lido. Por favor, inicie uma nova conversa.",
            "data": []
        }), 400
    
    try:
        # Verificar se temos resultados para esta sess√£o no cache
        if session_id in flight_search_sessions:
            logger.warning(f"‚úÖ Usando resultados em CACHE para sess√£o {session_id}")
            
            # Verificar se os dados em cache s√£o v√°lidos (t√™m lista de voos)
            cached_results = flight_search_sessions[session_id]
            if cached_results and 'data' in cached_results and len(cached_results['data']) > 0:
                logger.warning(f"üìä Retornando {len(cached_results['data'])} voos do cache")
                
                # Inserir cabe√ßalho para debugging
                cached_results['source'] = 'cache'
                return jsonify(cached_results)
            else:
                logger.warning("‚ö†Ô∏è Dados em cache existem mas est√£o vazios ou inv√°lidos")
        
        # Caso contr√°rio, verificar se temos par√¢metros de busca salvos
        from app import conversation_store
        
        # Verificar se a sess√£o existe no conversation_store
        if session_id not in conversation_store:
            logger.error(f"‚ùå Sess√£o {session_id} n√£o encontrada no conversation_store")
            return jsonify({
                "error": "Sess√£o n√£o encontrada. Por favor, inicie uma nova conversa.",
                "data": []
            }), 404
        
        logger.warning(f"üìù Encontrada sess√£o {session_id} no conversation_store")
        travel_info = conversation_store[session_id].get('travel_info', {})
        
        # Verificar se temos resultados j√° salvos
        if travel_info.get('search_results'):
            logger.warning(f"üìä Encontrados resultados salvos na travel_info da sess√£o {session_id}")
            
            # Validar se os resultados salvos t√™m dados
            saved_results = travel_info['search_results']
            if saved_results and 'data' in saved_results and len(saved_results['data']) > 0:
                logger.warning(f"üìä Retornando {len(saved_results['data'])} voos da travel_info")
                
                # Atualizar o cache e retornar
                flight_search_sessions[session_id] = saved_results
                
                # Inserir cabe√ßalho para debugging
                saved_results['source'] = 'travel_info'
                return jsonify(saved_results)
            else:
                logger.warning("‚ö†Ô∏è Resultados salvos existem mas est√£o vazios ou inv√°lidos")
        
        # Verificar se temos par√¢metros suficientes para realizar a busca
        if not (travel_info.get('origin') and travel_info.get('destination') and 
                (travel_info.get('departure_date') or travel_info.get('date_range_start'))):
            logger.error(f"‚ùå Par√¢metros insuficientes para busca na sess√£o {session_id}")
            return jsonify({
                "error": "Informa√ß√µes insuficientes para realizar a busca. Forne√ßa origem, destino e data.",
                "data": []
            }), 400
        
        # Usar o servi√ßo FlightServiceConnector para buscar resultados novos
        logger.warning(f"üîÑ Buscando NOVOS resultados reais da API Amadeus para sess√£o {session_id}")
        
        # Connector j√° est√° dispon√≠vel no topo do arquivo
        
        # Realizar a busca com o conector direto
        search_results = flight_service_connector.search_flights_from_chat(
            travel_info=travel_info,
            session_id=session_id
        )
        
        # Validar os resultados
        if not search_results:
            logger.error(f"‚ùå N√£o foi poss√≠vel obter resultados da API para sess√£o {session_id}")
            return jsonify({
                "error": "Falha na busca de resultados. Tente novamente com outros par√¢metros.",
                "data": []
            }), 500
            
        if 'error' in search_results:
            logger.error(f"‚ùå Erro na busca de voos: {search_results['error']}")
            return jsonify({
                "error": search_results['error'],
                "data": []
            }), 500
        
        # Verificar se recebemos dados v√°lidos
        if 'data' not in search_results or not search_results['data']:
            logger.error(f"‚ùå API retornou estrutura sem voos para sess√£o {session_id}")
            return jsonify({
                "error": "A API n√£o retornou voos para sua busca. Tente com outros par√¢metros.",
                "data": []
            }), 404
        
        # Adicionar metadados para diagn√≥stico
        search_results['source'] = 'api_direct'
        search_results['session_id'] = session_id
        search_results['timestamp'] = datetime.utcnow().isoformat()
        
        # Salvar os resultados em todos os lugares relevantes
        logger.warning(f"‚úÖ Obtidos {len(search_results['data'])} voos novos. Salvando para sess√£o {session_id}")
        flight_search_sessions[session_id] = search_results
        travel_info['search_results'] = search_results
        
        return jsonify(search_results)
        
    except Exception as e:
        import traceback
        logger.error(f"‚ùå Erro ao obter resultados de voos: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({
            "error": f"Ocorreu um erro ao buscar os resultados: {str(e)}",
            "data": []
        }), 500


# Rota para buscar diretamente pela API (usando o conector)
@api_blueprint.route('/api/flight_search', methods=['POST'])
def direct_flight_search():
    """
    Endpoint para busca direta de voos usando a API Amadeus.
    Este endpoint s√≥ usar o flight_service_connector para 
    garantir que apenas dados reais sejam retornados.
    """
    try:
        # Obter par√¢metros da requisi√ß√£o
        data = request.json
        session_id = data.get('session_id', str(uuid.uuid4()))
        
        logger.info(f"Busca direta de voos - Sess√£o: {session_id}")
        logger.debug(f"Par√¢metros de busca: {json.dumps(data, default=str)}")
        
        # Validar par√¢metros m√≠nimos
        if not (data.get('origin') and data.get('destination') and 
                (data.get('departure_date') or data.get('date_range_start'))):
            return jsonify({
                "error": "Par√¢metros insuficientes. Forne√ßa origem, destino e data.",
                "data": []
            })
        
        # Realizar a busca com o conector
        search_results = flight_service_connector.search_flights_from_chat(
            travel_info=data,
            session_id=session_id
        )
        
        # Validar e retornar os resultados
        if not search_results or 'error' in search_results:
            error_msg = search_results.get('error', 'Falha na busca de resultados') if search_results else 'Sem resultados'
            logger.error(f"Erro na busca direta: {error_msg}")
            return jsonify({
                "error": error_msg,
                "data": []
            })
        
        # Cache e retorno dos resultados
        flight_search_sessions[session_id] = search_results
        logger.info(f"Busca direta conclu√≠da com sucesso: {len(search_results.get('data', []))} resultados")
        
        # Adicionar o ID da sess√£o na resposta
        search_results['session_id'] = session_id
        return jsonify(search_results)
    
    except Exception as e:
        logger.error(f"Erro na busca direta de voos: {str(e)}")
        return jsonify({
            "error": f"Erro ao processar a busca: {str(e)}",
            "data": []
        }), 500


# P√°gina de resultados da API Amadeus
@api_blueprint.route('/amadeus-results', methods=['GET'])
def amadeus_results_page():
    """
    Renderiza a p√°gina de resultados de voos com base nos par√¢metros fornecidos.
    Esta p√°gina √© o destino do bot√£o "Clique aqui para ver suas melhores op√ß√µes"
    mostrado pela AVI ap√≥s a coleta de informa√ß√µes.
    """
    try:
        # Obter par√¢metros da URL
        origin = request.args.get('origin', 'GRU')
        destination = request.args.get('destination', 'MIA')
        departure_date = request.args.get('departure_date', (datetime.utcnow() + timedelta(days=30)).strftime('%Y-%m-%d'))
        adults = request.args.get('adults', '1')
        session_id = request.args.get('session_id', '')
        
        # Renderizar a p√°gina com os par√¢metros fornecidos
        return render_template(
            'amadeus_results.html',
            origin=origin,
            destination=destination,
            departure_date=departure_date,
            adults=adults,
            session_id=session_id
        )
    except Exception as e:
        logger.error(f"Erro ao renderizar p√°gina de resultados: {str(e)}")
        return render_template('error.html', message=f"Erro ao carregar resultados: {str(e)}")

# Endpoint de API para busca de voos para a p√°gina de resultados
@api_blueprint.route('/amadeus-test', methods=['GET'])
def amadeus_test():
    """
    Endpoint para buscar dados reais de voos da API Amadeus.
    Usado pela p√°gina de resultados para obter dados via JavaScript.
    """
    try:
        logger.warning("üì° TESTE AMADEUS: Iniciando teste de conex√£o direta")
        
        # Obter par√¢metros da URL, se fornecidos
        origin = request.args.get('origin', 'GRU')
        destination = request.args.get('destination', 'MIA')
        departure_date = request.args.get('departure_date', 
                                          (datetime.utcnow() + timedelta(days=30)).strftime('%Y-%m-%d'))
        adults = request.args.get('adults', '1')
        
        # Preparar dados para teste
        search_data = {
            "origin": origin,
            "destination": destination,
            "departure_date": departure_date,
            "adults": int(adults),
            "session_id": str(uuid.uuid4())
        }
        
        # Usar o flight_service_connector para buscar resultados reais
        search_results = flight_service_connector.search_flights_from_chat(
            travel_info=search_data,
            session_id=search_data["session_id"]
        )
        
        # Verificar resultados
        if not search_results or 'error' in search_results:
            error_msg = search_results.get('error', 'Erro desconhecido') if search_results else 'Sem resultados'
            logger.error(f"‚ùå TESTE AMADEUS: Falha na conex√£o - {error_msg}")
            return jsonify({
                "error": error_msg,
                "data": [],
                "success": False
            }), 500
        
        # Adicionar metadados para diagn√≥stico
        flight_count = len(search_results.get('data', []))
        search_results['success'] = True
        search_results['test_timestamp'] = datetime.utcnow().isoformat()
        search_results['flight_count'] = flight_count
        search_results['search_params'] = {
            'origin': origin,
            'destination': destination,
            'departure_date': departure_date,
            'adults': adults
        }
        
        logger.warning(f"‚úÖ TESTE AMADEUS: Conex√£o bem-sucedida - {flight_count} voos encontrados")
        return jsonify(search_results)
        
    except Exception as e:
        logger.error(f"‚ùå TESTE AMADEUS: Erro durante o teste - {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            "error": f"Erro no teste: {str(e)}",
            "data": [],
            "success": False
        }), 500
