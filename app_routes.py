"""
Rotas da API para o painel de resultados de voos reais
Este m√≥dulo cont√©m as rotas necess√°rias para fornecer dados reais 
da API TravelPayouts para exibi√ß√£o no frontend.

IMPORTANTE: Este m√≥dulo garante que apenas dados reais da API TravelPayouts
sejam retornados, nunca usando dados simulados ou falsos.
"""

import os
import json
import logging
import uuid
import traceback
import requests
from datetime import datetime, timedelta
from flask import Blueprint, request, jsonify, current_app, render_template, make_response

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Importar os servi√ßos necess√°rios
from services.travelpayouts_service import TravelPayoutsService
from services.travelpayouts_connector import travelpayouts_connector

# Criar blueprint para as rotas da API de resultados de voos
api_blueprint = Blueprint('flight_results_api', __name__)

# Armazenamento em mem√≥ria para sess√µes de busca (tempor√°rio)
# Na implementa√ß√£o final, isso seria movido para um banco de dados
flight_search_sessions = {}

@api_blueprint.route('/api/flight_results/<session_id>', methods=['GET'])
@api_blueprint.route('/api/flight_results', methods=['GET'])
def get_flight_results(session_id=None):
    """
    ENDPOINT DEFINITIVO PARA MURAL DE VOOS
    
    Obt√©m os resultados de voos reais da API TravelPayouts para uma sess√£o espec√≠fica,
    usando exclusivamente o servi√ßo travelpayouts_connector para garantir que
    apenas dados reais da API TravelPayouts sejam retornados.
    
    Este endpoint √© o √öNICO ponto de acesso para o painel lateral obter dados,
    eliminando qualquer caminho que possa mostrar dados n√£o-reais.
    
    Args:
        session_id: ID da sess√£o do chat (opcional, pode vir do cookie)
    """
    # Tentar obter session_id do cookie se n√£o foi fornecido na URL
    if not session_id:
        session_id = request.cookies.get('flai_session_id')
        logger.warning(f"üç™ Usando ID da sess√£o do cookie: {session_id}")
    
    # Mensagem clara de in√≠cio de processamento para debug
    logger.warning(f"üõ´ ENDPOINT REAL: Processando solicita√ß√£o de voos para sess√£o {session_id}")
    
    # Validar session_id
    if not session_id or session_id == "undefined" or session_id == "null":
        logger.error("‚ùå Session ID inv√°lido ou n√£o fornecido")
        return jsonify({
            "error": "ID de sess√£o inv√°lido. Por favor, inicie uma nova conversa.",
            "data": []
        }), 400
    
    try:
        # Verificar se temos resultados para esta sess√£o no cache
        if session_id in flight_search_sessions:
            logger.warning(f"‚úÖ Usando resultados em CACHE para sess√£o {session_id}")
            
            # Verificar se os dados em cache s√£o v√°lidos (t√™m lista de voos)
            cached_results = flight_search_sessions[session_id]
            if cached_results and 'data' in cached_results and len(cached_results['data']) > 0:
                logger.warning(f"üìä Retornando {len(cached_results['data'])} voos do cache")
                
                # Inserir cabe√ßalho para debugging
                cached_results['source'] = 'cache'
                return jsonify(cached_results)
            else:
                logger.warning("‚ö†Ô∏è Dados em cache existem mas est√£o vazios ou inv√°lidos")
        
        # Caso contr√°rio, verificar se temos par√¢metros de busca salvos
        from app import conversation_store
        
        # Verificar se a sess√£o existe no conversation_store
        if session_id not in conversation_store:
            logger.error(f"‚ùå Sess√£o {session_id} n√£o encontrada no conversation_store")
            return jsonify({
                "error": "Sess√£o n√£o encontrada. Por favor, inicie uma nova conversa.",
                "data": []
            }), 404
        
        logger.warning(f"üìù Encontrada sess√£o {session_id} no conversation_store")
        travel_info = conversation_store[session_id].get('travel_info', {})
        
        # Verificar se temos resultados j√° salvos
        if travel_info.get('search_results'):
            logger.warning(f"üìä Encontrados resultados salvos na travel_info da sess√£o {session_id}")
            
            # Validar se os resultados salvos t√™m dados
            saved_results = travel_info['search_results']
            if saved_results and 'data' in saved_results and len(saved_results['data']) > 0:
                logger.warning(f"üìä Retornando {len(saved_results['data'])} voos da travel_info")
                
                # Atualizar o cache e retornar
                flight_search_sessions[session_id] = saved_results
                
                # Inserir cabe√ßalho para debugging
                saved_results['source'] = 'travel_info'
                return jsonify(saved_results)
            else:
                logger.warning("‚ö†Ô∏è Resultados salvos existem mas est√£o vazios ou inv√°lidos")
        
        # Verificar se temos par√¢metros suficientes para realizar a busca
        if not (travel_info.get('origin') and travel_info.get('destination') and 
                (travel_info.get('departure_date') or travel_info.get('date_range_start'))):
            logger.error(f"‚ùå Par√¢metros insuficientes para busca na sess√£o {session_id}")
            return jsonify({
                "error": "Informa√ß√µes insuficientes para realizar a busca. Forne√ßa origem, destino e data.",
                "data": []
            }), 400
        
        # Usar o servi√ßo TravelPayoutsConnector para buscar resultados novos
        logger.warning(f"üîÑ Buscando NOVOS resultados reais da API TravelPayouts para sess√£o {session_id}")
        
        # Connector j√° est√° dispon√≠vel no topo do arquivo
        
        # Realizar a busca com o conector direto
        search_results = travelpayouts_connector.search_flights_from_chat(
            travel_info=travel_info,
            session_id=session_id
        )
        
        # Validar os resultados
        if not search_results:
            logger.error(f"‚ùå N√£o foi poss√≠vel obter resultados da API para sess√£o {session_id}")
            return jsonify({
                "error": "Falha na busca de resultados. Tente novamente com outros par√¢metros.",
                "data": []
            }), 500
            
        if 'error' in search_results:
            logger.error(f"‚ùå Erro na busca de voos: {search_results['error']}")
            return jsonify({
                "error": search_results['error'],
                "data": []
            }), 500
        
        # Verificar se recebemos dados v√°lidos
        if 'data' not in search_results or not search_results['data']:
            logger.error(f"‚ùå API retornou estrutura sem voos para sess√£o {session_id}")
            return jsonify({
                "error": "A API n√£o retornou voos para sua busca. Tente com outros par√¢metros.",
                "data": []
            }), 404
        
        # Adicionar metadados para diagn√≥stico
        search_results['source'] = 'api_direct'
        search_results['session_id'] = session_id
        search_results['timestamp'] = datetime.utcnow().isoformat()
        
        # Salvar os resultados em todos os lugares relevantes
        logger.warning(f"‚úÖ Obtidos {len(search_results['data'])} voos novos. Salvando para sess√£o {session_id}")
        flight_search_sessions[session_id] = search_results
        travel_info['search_results'] = search_results
        
        return jsonify(search_results)
        
    except Exception as e:
        import traceback
        logger.error(f"‚ùå Erro ao obter resultados de voos: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({
            "error": f"Ocorreu um erro ao buscar os resultados: {str(e)}",
            "data": []
        }), 500


# Rota para buscar diretamente pela API (usando o conector)
@api_blueprint.route('/api/flight_search', methods=['POST'])
def direct_flight_search():
    """
    Endpoint para busca direta de voos usando a API TravelPayouts.
    Este endpoint s√≥ usa o travelpayouts_connector para 
    garantir que apenas dados reais sejam retornados.
    """
    try:
        # Obter par√¢metros da requisi√ß√£o
        data = request.json
        session_id = data.get('session_id', str(uuid.uuid4()))
        
        logger.info(f"Busca direta de voos - Sess√£o: {session_id}")
        logger.debug(f"Par√¢metros de busca: {json.dumps(data, default=str)}")
        
        # Validar par√¢metros m√≠nimos
        if not (data.get('origin') and data.get('destination') and 
                (data.get('departure_date') or data.get('date_range_start'))):
            return jsonify({
                "error": "Par√¢metros insuficientes. Forne√ßa origem, destino e data.",
                "data": []
            })
        
        # Realizar a busca com o conector
        search_results = travelpayouts_connector.search_flights_from_chat(
            travel_info=data,
            session_id=session_id
        )
        
        # Validar e retornar os resultados
        if not search_results or 'error' in search_results:
            error_msg = search_results.get('error', 'Falha na busca de resultados') if search_results else 'Sem resultados'
            logger.error(f"Erro na busca direta: {error_msg}")
            return jsonify({
                "error": error_msg,
                "data": []
            })
        
        # Cache e retorno dos resultados
        flight_search_sessions[session_id] = search_results
        logger.info(f"Busca direta conclu√≠da com sucesso: {len(search_results.get('data', []))} resultados")
        
        # Adicionar o ID da sess√£o na resposta
        search_results['session_id'] = session_id
        return jsonify(search_results)
    
    except Exception as e:
        logger.error(f"Erro na busca direta de voos: {str(e)}")
        return jsonify({
            "error": f"Erro ao processar a busca: {str(e)}",
            "data": []
        }), 500


# P√°gina de resultados da API TravelPayouts
@api_blueprint.route('/travelpayouts-results', methods=['GET'])
@api_blueprint.route('/amadeus-results', methods=['GET'])  # Manter rota antiga para compatibilidade
def travelpayouts_results_page():
    """
    Renderiza a p√°gina de resultados de voos com base nos par√¢metros fornecidos.
    Esta p√°gina √© o destino do bot√£o "Clique aqui para ver suas melhores op√ß√µes"
    mostrado pela AVI ap√≥s a coleta de informa√ß√µes.
    """
    try:
        # Tentar obter session_id do cookie
        session_id = request.cookies.get('flai_session_id')
        travel_info = {}
        
        # Se temos um ID de sess√£o, tentar obter informa√ß√µes da viagem
        if session_id:
            # Importar o conversation_store
            from app import conversation_store
            
            if session_id in conversation_store:
                # Carregar as informa√ß√µes salvas
                travel_info = conversation_store[session_id].get('travel_info', {})
                logger.warning(f"‚úÖ Usando informa√ß√µes de viagem da sess√£o {session_id} para p√°gina de resultados")
            
        # Usar dados da conversa ou par√¢metros da URL, sem valores padr√£o
        origin = travel_info.get('origin') or request.args.get('origin')
        destination = travel_info.get('destination') or request.args.get('destination')
        departure_date = travel_info.get('departure_date') or request.args.get('departure_date')
        adults = travel_info.get('adults') or request.args.get('adults')
        
        # Verificar se temos os par√¢metros necess√°rios - n√£o usar padr√µes
        if not (origin and destination and departure_date):
            logger.warning(f"‚ö†Ô∏è ERRO: Par√¢metros insuficientes para busca. Travel info: {travel_info}")
            
            # Log detalhado para depura√ß√£o
            if travel_info:
                logger.warning(f"üîé CONTE√öDO DE TRAVEL_INFO: {json.dumps(travel_info, default=str)}")
            else:
                logger.warning("‚ùå TRAVEL_INFO est√° vazio ou n√£o existe")
                
            logger.warning(f"üîé URL PARAMS: origin={request.args.get('origin')}, dest={request.args.get('destination')}, date={request.args.get('departure_date')}")
            
            # Se tivermos o objeto travel_info mas faltarem campos espec√≠ficos
            missing = []
            if not origin: missing.append("origem")
            if not destination: missing.append("destino") 
            if not departure_date: missing.append("data de partida")
            
            return render_template(
                'error.html', 
                message=f"Par√¢metros insuficientes: faltam {', '.join(missing)}. Por favor, forne√ßa todas as informa√ß√µes necess√°rias na conversa com a AVI."
            )
        
        # Renderizar a p√°gina com os par√¢metros obtidos
        resp = make_response(render_template(
            'amadeus_results.html',
            origin=origin,
            destination=destination,
            departure_date=departure_date,
            adults=adults
        ))
        
        # Verificar se precisamos definir um cookie de sess√£o
        if not session_id and travel_info:
            # Criar nova sess√£o
            session_id = str(uuid.uuid4())
            
            # Configurar cookie
            resp.set_cookie(
                'flai_session_id', 
                session_id, 
                httponly=True,       # N√£o acess√≠vel via JavaScript 
                secure=True,         # S√≥ enviado em HTTPS
                samesite='Lax',      # Prote√ß√£o contra CSRF
                max_age=86400        # V√°lido por 24 horas
            )
            
            logger.warning(f"üç™ Definindo cookie flai_session_id com valor: {session_id}")
        
        return resp
    except Exception as e:
        logger.error(f"Erro ao renderizar p√°gina de resultados: {str(e)}")
        return render_template('error.html', message=f"Erro ao carregar resultados: {str(e)}")

# Endpoint de API para busca de voos para a p√°gina de resultados
@api_blueprint.route('/travelpayouts-test', methods=['GET'])
@api_blueprint.route('/amadeus-test', methods=['GET'])  # Manter rota antiga para compatibilidade
def travelpayouts_test():
    """
    Endpoint para buscar dados reais de voos da API TravelPayouts.
    Usado pela p√°gina de resultados para obter dados via JavaScript.
    """
    try:
        logger.warning("üì° TESTE TRAVELPAYOUTS: Iniciando teste de conex√£o direta")
        
        # Tentar obter session_id do cookie
        session_id = request.cookies.get('flai_session_id')
        
        # Se n√£o existir cookie, criar um ID novo para o teste
        if not session_id:
            session_id = str(uuid.uuid4())
            logger.warning(f"‚ö†Ô∏è Cookie flai_session_id n√£o encontrado, usando ID tempor√°rio: {session_id}")
        else:
            logger.warning(f"‚úÖ Encontrado cookie flai_session_id com valor: {session_id}")
            
            # Verificar se temos dados salvos da conversa para essa sess√£o
            from app import conversation_store
            if session_id in conversation_store:
                travel_info = conversation_store[session_id].get('travel_info', {})
                
                # Se temos dados salvos da conversa, usar eles
                if travel_info and (travel_info.get('origin') and travel_info.get('destination')):
                    logger.warning(f"‚úÖ Usando informa√ß√µes de viagem da sess√£o {session_id}")
                    
                    # Verificar se j√° temos resultados guardados
                    if travel_info.get('search_results'):
                        logger.warning(f"üìä Retornando resultados j√° salvos para sess√£o {session_id}")
                        search_results = travel_info.get('search_results')
                        # Adicionar metadados
                        search_results['success'] = True
                        search_results['source'] = 'session_cache'
                        search_results['test_timestamp'] = datetime.utcnow().isoformat()
                        return jsonify(search_results)
                    
                    # Usar os dados da conversa para buscar novos resultados
                    search_data = {
                        "origin": travel_info.get('origin'),
                        "destination": travel_info.get('destination'),
                        "departure_date": travel_info.get('departure_date'),
                        "adults": travel_info.get('adults', 1),
                    }
                    
                    # Usar o travelpayouts_connector com a travel_info da sess√£o
                    logger.warning(f"üîç Buscando voos com dados da sess√£o para {search_data['origin']} ‚Üí {search_data['destination']}")
                    
                    search_results = travelpayouts_connector.search_flights_from_chat(
                        travel_info=travel_info,
                        session_id=session_id
                    )
                    
                    # Salvar resultados na sess√£o
                    if search_results and 'error' not in search_results:
                        travel_info['search_results'] = search_results
                    
                    return jsonify(search_results)
                    
        # Se n√£o temos dados da sess√£o, usar apenas par√¢metros da URL (sem valores padr√£o)
        origin = request.args.get('origin')
        destination = request.args.get('destination')
        departure_date = request.args.get('departure_date')
        adults = request.args.get('adults')
        
        # Verificar se temos par√¢metros suficientes
        if not (origin and destination and departure_date):
            logger.error("‚ùå TESTE TRAVELPAYOUTS: Par√¢metros insuficientes para busca")
            return jsonify({
                "error": "Par√¢metros insuficientes. Por favor, forne√ßa origem, destino e data na conversa com a AVI.",
                "data": [],
                "success": False
            }), 400
        
        # Preparar dados para teste
        search_data = {
            "origin": origin,
            "destination": destination,
            "departure_date": departure_date,
            "adults": int(adults)
        }
        
        # Usar o travelpayouts_connector para buscar resultados reais
        logger.warning(f"üîç Buscando voos com par√¢metros diretos para {origin} ‚Üí {destination}")
        search_results = travelpayouts_connector.search_flights_from_chat(
            travel_info=search_data,
            session_id=session_id
        )
        
        # Verificar resultados
        if not search_results or 'error' in search_results:
            error_msg = search_results.get('error', 'Erro desconhecido') if search_results else 'Sem resultados'
            logger.error(f"‚ùå TESTE TRAVELPAYOUTS: Falha na conex√£o - {error_msg}")
            return jsonify({
                "error": error_msg,
                "data": [],
                "success": False
            }), 500
        
        # Adicionar metadados para diagn√≥stico
        flight_count = len(search_results.get('data', []))
        search_results['success'] = True
        search_results['test_timestamp'] = datetime.utcnow().isoformat()
        search_results['flight_count'] = flight_count
        search_results['search_params'] = {
            'origin': origin,
            'destination': destination,
            'departure_date': departure_date,
            'adults': adults
        }
        
        logger.warning(f"‚úÖ TESTE TRAVELPAYOUTS: Conex√£o bem-sucedida - {flight_count} voos encontrados")
        return jsonify(search_results)
        
    except Exception as e:
        logger.error(f"‚ùå TESTE TRAVELPAYOUTS: Erro durante o teste - {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({
            "error": f"Erro no teste: {str(e)}",
            "data": [],
            "success": False
        }), 500
