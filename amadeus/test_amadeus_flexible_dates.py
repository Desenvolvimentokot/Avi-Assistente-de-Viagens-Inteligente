#!/usr/bin/env python3
"""
Script para testar a funcionalidade de busca com datas flex√≠veis no servi√ßo Amadeus.
Este teste verifica se o par√¢metro max_dates_to_check est√° funcionando corretamente.
"""
import logging
import os
from datetime import datetime
import sys

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Adicionar diret√≥rio raiz ao path para importar os m√≥dulos
if os.path.exists('services'):
    sys.path.append('.')

# Importar servi√ßos ap√≥s ajustar o path
from services.busca_rapida_service import search_best_prices

def print_section(title):
    """Imprime uma se√ß√£o formatada no relat√≥rio"""
    line = "=" * 70
    print("\n" + line)
    print(f"{title}".center(70, "="))
    print(line + "\n")

def test_max_dates_parameter():
    """Testa a funcionalidade do par√¢metro max_dates_to_check"""
    print_section("Teste do Par√¢metro max_dates_to_check")
    
    # Criar informa√ß√µes de viagem para teste
    travel_info = {
        'origin': 'GRU',  # S√£o Paulo
        'destination': 'RIO',  # Rio de Janeiro
        'date_range_start': '2025-05-01',
        'date_range_end': '2025-05-31',
        'adults': 1,
        'is_flexible': True
    }
    
    # Definir diferentes valores para max_dates_to_check
    test_cases = [
        {'max': 1, 'desc': 'apenas 1 data'},
        {'max': 3, 'desc': '3 datas'},
        {'max': 5, 'desc': '5 datas'}
    ]
    
    for case in test_cases:
        max_dates = case['max']
        desc = case['desc']
        
        print(f"\nüîç Testando busca com {desc}")
        travel_info['max_dates_to_check'] = max_dates
        
        # Registrar o tempo de in√≠cio
        start_time = datetime.now()
        
        # Buscar melhores pre√ßos
        result = search_best_prices(travel_info)
        
        # Calcular o tempo total
        elapsed = (datetime.now() - start_time).total_seconds()
        
        # Verificar resultados
        if 'error' in result:
            print(f"‚ùå Erro na busca: {result['error']}")
        else:
            best_prices = result.get('best_prices', [])
            print(f"‚úÖ Busca conclu√≠da em {elapsed:.2f} segundos")
            print(f"   Datas verificadas: {max_dates}")
            print(f"   Resultados obtidos: {len(best_prices)}")
            
            # Mostrar exemplos de pre√ßos
            if best_prices:
                print("\n   Exemplos de pre√ßos:")
                for i, price in enumerate(best_prices[:3]):
                    print(f"      {i+1}. Data: {price['date']} - Pre√ßo: {price['price']} {price['currency']}")

def main():
    """Fun√ß√£o principal para executar o teste"""
    print_section("Teste de Busca com Datas Flex√≠veis - Amadeus")
    
    # Executar teste
    test_max_dates_parameter()
    
    print_section("Teste Conclu√≠do")

if __name__ == "__main__":
    main()