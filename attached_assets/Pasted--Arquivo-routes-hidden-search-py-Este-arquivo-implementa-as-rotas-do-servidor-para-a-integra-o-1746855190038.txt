# Arquivo: routes_hidden_search.py
# Este arquivo implementa as rotas do servidor para a integra√ß√£o com o Trip.com

from flask import Blueprint, render_template, request, jsonify, redirect, url_for
import logging
import json
from services.chat_service import add_system_message_to_chat

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Criar o blueprint para as rotas de busca oculta
hidden_search = Blueprint('hidden_search', __name__)

@hidden_search.route('/hidden-flight-search')
def hidden_flight_search():
    """P√°gina que executa a busca de voos em segundo plano."""
    # Obter par√¢metros da URL
    origin = request.args.get('origin', '')
    destination = request.args.get('destination', '')
    departure_date = request.args.get('departureDate', '')
    return_date = request.args.get('returnDate', '')
    passengers = request.args.get('passengers', '1')
    session_id = request.args.get('sessionId', '')
    
    logger.info(f"Iniciando busca para voo: {origin} -> {destination}, Ida: {departure_date}, Volta: {return_date}, Passageiros: {passengers}")
    
    # Renderizar a p√°gina com os par√¢metros
    return render_template('hidden_flight_search.html')

@hidden_search.route('/hidden-search/notify-search-started', methods=['POST'])
def notify_search_started():
    """Notifica que a busca de voos foi iniciada."""
    data = request.json
    session_id = data.get('sessionId')
    
    if not session_id:
        return jsonify({'success': False, 'error': 'ID de sess√£o n√£o fornecido'}), 400
    
    # Envia mensagem para o chat informando que a busca come√ßou
    message = "üîç **Estou buscando as melhores op√ß√µes de voos para voc√™...**\n\nIsso pode levar alguns instantes. Por favor, aguarde enquanto consulto as companhias a√©reas."
    
    try:
        add_system_message_to_chat(session_id, message)
        logger.info(f"Notifica√ß√£o de busca iniciada enviada para sess√£o {session_id}")
        return jsonify({'success': True})
    except Exception as e:
        logger.error(f"Erro ao enviar notifica√ß√£o de busca: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

@hidden_search.route('/hidden-search/save-flight-results', methods=['POST'])
def save_flight_results():
    """Salva os resultados de voos e envia para o chat."""
    data = request.json
    session_id = data.get('sessionId')
    results = data.get('results', [])
    
    if not session_id:
        return jsonify({'success': False, 'error': 'ID de sess√£o n√£o fornecido'}), 400
    
    # Registra os resultados recebidos
    logger.info(f"Recebidos {len(results)} resultados para sess√£o {session_id}")
    
    # Cria uma mensagem formatada com os resultados
    if not results:
        message = "‚ùå **N√£o encontrei op√ß√µes de voo para as datas solicitadas.**\n\nPor favor, tente com datas diferentes ou destinos alternativos."
    else:
        # Formata a mensagem com os resultados dos voos
        message = "‚úÖ **Encontrei √≥timas op√ß√µes de voo para voc√™!**\n\n"
        
        for i, flight in enumerate(results[:2], 1):
            # Formata os detalhes do voo
            price = flight.get('price', 'Pre√ßo indispon√≠vel')
            airline = flight.get('airline', 'Companhia a√©rea')
            departure_time = flight.get('departureTime', '')
            arrival_time = flight.get('arrivalTime', '')
            duration = flight.get('duration', '')
            stops = flight.get('stops', 0)
            
            # URLs para compra direta
            purchase_url = flight.get('purchaseUrl', '')
            
            # Adiciona informa√ß√µes do voo √† mensagem
            message += f"**Op√ß√£o {i}:**\n"
            message += f"üõ´ {airline} - R$ {price}\n"
            
            if departure_time and arrival_time:
                message += f"‚è∞ Sa√≠da: {departure_time} ‚Üí Chegada: {arrival_time}\n"
            
            if duration:
                message += f"‚åõ Dura√ß√£o: {duration}\n"
            
            if stops == 0:
                message += "‚úàÔ∏è Voo direto\n"
            else:
                message += f"‚úàÔ∏è {stops} {'parada' if stops == 1 else 'paradas'}\n"
            
            if purchase_url:
                message += f"üîó [Clique aqui para reservar este voo]({purchase_url})\n"
            
            message += "\n"
        
        message += "Posso ajudar com mais alguma informa√ß√£o sobre esses voos?"
    
    try:
        # Adiciona a mensagem ao chat
        add_system_message_to_chat(session_id, message)
        logger.info(f"Mensagem com resultados de voos adicionada ao chat para sess√£o {session_id}")
        
        return jsonify({'success': True})
    except Exception as e:
        logger.error(f"Erro ao salvar resultados de voo: {str(e)}")
        return jsonify({'success': False, 'error': str(e)}), 500

# Arquivo: services/chat_service.py
# Servi√ßo para enviar mensagens ao chat

import logging

logger = logging.getLogger(__name__)

def add_system_message_to_chat(session_id, message_text):
    """
    Adiciona uma mensagem do sistema ao hist√≥rico de chat.
    Esta fun√ß√£o deve se conectar ao seu sistema de chat existente.
    
    Args:
        session_id (str): ID da sess√£o do chat
        message_text (str): Texto da mensagem a ser adicionada
    
    Returns:
        bool: True se a mensagem foi adicionada com sucesso
    """
    try:
        # Esta implementa√ß√£o deve ser adaptada para se integrar ao seu sistema existente
        # Aqui est√° uma implementa√ß√£o de exemplo:
        
        # 1. Encontrar a sess√£o de chat
        logger.info(f"Adicionando mensagem de sistema √† sess√£o {session_id}")
        
        # 2. Adicionar a mensagem como se fosse do sistema (n√£o do usu√°rio)
        # Sua implementa√ß√£o aqui, por exemplo:
        # chat_service.add_message(session_id, 'system', message_text)
        
        logger.info(f"Mensagem de sistema adicionada com sucesso √† sess√£o {session_id}")
        return True
    except Exception as e:
        logger.error(f"Erro ao adicionar mensagem ao chat: {str(e)}")
        raise e